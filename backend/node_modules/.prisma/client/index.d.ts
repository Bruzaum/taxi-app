
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Driver
 * 
 */
export type Driver = $Result.DefaultSelection<Prisma.$DriverPayload>
/**
 * Model RideRequest
 * 
 */
export type RideRequest = $Result.DefaultSelection<Prisma.$RideRequestPayload>
/**
 * Model RideLog
 * 
 */
export type RideLog = $Result.DefaultSelection<Prisma.$RideLogPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customer.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customer.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs>;

  /**
   * `prisma.driver`: Exposes CRUD operations for the **Driver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Drivers
    * const drivers = await prisma.driver.findMany()
    * ```
    */
  get driver(): Prisma.DriverDelegate<ExtArgs>;

  /**
   * `prisma.rideRequest`: Exposes CRUD operations for the **RideRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RideRequests
    * const rideRequests = await prisma.rideRequest.findMany()
    * ```
    */
  get rideRequest(): Prisma.RideRequestDelegate<ExtArgs>;

  /**
   * `prisma.rideLog`: Exposes CRUD operations for the **RideLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RideLogs
    * const rideLogs = await prisma.rideLog.findMany()
    * ```
    */
  get rideLog(): Prisma.RideLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Customer: 'Customer',
    Driver: 'Driver',
    RideRequest: 'RideRequest',
    RideLog: 'RideLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "customer" | "driver" | "rideRequest" | "rideLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Driver: {
        payload: Prisma.$DriverPayload<ExtArgs>
        fields: Prisma.DriverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DriverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DriverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          findFirst: {
            args: Prisma.DriverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DriverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          findMany: {
            args: Prisma.DriverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>[]
          }
          create: {
            args: Prisma.DriverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          createMany: {
            args: Prisma.DriverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DriverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>[]
          }
          delete: {
            args: Prisma.DriverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          update: {
            args: Prisma.DriverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          deleteMany: {
            args: Prisma.DriverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DriverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DriverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DriverPayload>
          }
          aggregate: {
            args: Prisma.DriverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDriver>
          }
          groupBy: {
            args: Prisma.DriverGroupByArgs<ExtArgs>
            result: $Utils.Optional<DriverGroupByOutputType>[]
          }
          count: {
            args: Prisma.DriverCountArgs<ExtArgs>
            result: $Utils.Optional<DriverCountAggregateOutputType> | number
          }
        }
      }
      RideRequest: {
        payload: Prisma.$RideRequestPayload<ExtArgs>
        fields: Prisma.RideRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RideRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RideRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>
          }
          findFirst: {
            args: Prisma.RideRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RideRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>
          }
          findMany: {
            args: Prisma.RideRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>[]
          }
          create: {
            args: Prisma.RideRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>
          }
          createMany: {
            args: Prisma.RideRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RideRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>[]
          }
          delete: {
            args: Prisma.RideRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>
          }
          update: {
            args: Prisma.RideRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>
          }
          deleteMany: {
            args: Prisma.RideRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RideRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RideRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideRequestPayload>
          }
          aggregate: {
            args: Prisma.RideRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRideRequest>
          }
          groupBy: {
            args: Prisma.RideRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<RideRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.RideRequestCountArgs<ExtArgs>
            result: $Utils.Optional<RideRequestCountAggregateOutputType> | number
          }
        }
      }
      RideLog: {
        payload: Prisma.$RideLogPayload<ExtArgs>
        fields: Prisma.RideLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RideLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RideLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>
          }
          findFirst: {
            args: Prisma.RideLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RideLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>
          }
          findMany: {
            args: Prisma.RideLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>[]
          }
          create: {
            args: Prisma.RideLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>
          }
          createMany: {
            args: Prisma.RideLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RideLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>[]
          }
          delete: {
            args: Prisma.RideLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>
          }
          update: {
            args: Prisma.RideLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>
          }
          deleteMany: {
            args: Prisma.RideLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RideLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RideLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RideLogPayload>
          }
          aggregate: {
            args: Prisma.RideLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRideLog>
          }
          groupBy: {
            args: Prisma.RideLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<RideLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.RideLogCountArgs<ExtArgs>
            result: $Utils.Optional<RideLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    RideLog: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RideLog?: boolean | CustomerCountOutputTypeCountRideLogArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountRideLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideLogWhereInput
  }


  /**
   * Count Type DriverCountOutputType
   */

  export type DriverCountOutputType = {
    RideLog: number
    RideRequest: number
  }

  export type DriverCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RideLog?: boolean | DriverCountOutputTypeCountRideLogArgs
    RideRequest?: boolean | DriverCountOutputTypeCountRideRequestArgs
  }

  // Custom InputTypes
  /**
   * DriverCountOutputType without action
   */
  export type DriverCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DriverCountOutputType
     */
    select?: DriverCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DriverCountOutputType without action
   */
  export type DriverCountOutputTypeCountRideLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideLogWhereInput
  }

  /**
   * DriverCountOutputType without action
   */
  export type DriverCountOutputTypeCountRideRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideRequestWhereInput
  }


  /**
   * Count Type RideRequestCountOutputType
   */

  export type RideRequestCountOutputType = {
    options: number
  }

  export type RideRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | RideRequestCountOutputTypeCountOptionsArgs
  }

  // Custom InputTypes
  /**
   * RideRequestCountOutputType without action
   */
  export type RideRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequestCountOutputType
     */
    select?: RideRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RideRequestCountOutputType without action
   */
  export type RideRequestCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DriverWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    name: string
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    RideLog?: boolean | Customer$RideLogArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RideLog?: boolean | Customer$RideLogArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      RideLog: Prisma.$RideLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    RideLog<T extends Customer$RideLogArgs<ExtArgs> = {}>(args?: Subset<T, Customer$RideLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */ 
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly name: FieldRef<"Customer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
  }

  /**
   * Customer.RideLog
   */
  export type Customer$RideLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    where?: RideLogWhereInput
    orderBy?: RideLogOrderByWithRelationInput | RideLogOrderByWithRelationInput[]
    cursor?: RideLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RideLogScalarFieldEnum | RideLogScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Driver
   */

  export type AggregateDriver = {
    _count: DriverCountAggregateOutputType | null
    _avg: DriverAvgAggregateOutputType | null
    _sum: DriverSumAggregateOutputType | null
    _min: DriverMinAggregateOutputType | null
    _max: DriverMaxAggregateOutputType | null
  }

  export type DriverAvgAggregateOutputType = {
    id: number | null
    review_rating: number | null
    value: number | null
    km_min: number | null
  }

  export type DriverSumAggregateOutputType = {
    id: number | null
    review_rating: number | null
    value: number | null
    km_min: number | null
  }

  export type DriverMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    vehicle: string | null
    review_rating: number | null
    review_comment: string | null
    value: number | null
    km_min: number | null
  }

  export type DriverMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    vehicle: string | null
    review_rating: number | null
    review_comment: string | null
    value: number | null
    km_min: number | null
  }

  export type DriverCountAggregateOutputType = {
    id: number
    name: number
    description: number
    vehicle: number
    review_rating: number
    review_comment: number
    value: number
    km_min: number
    _all: number
  }


  export type DriverAvgAggregateInputType = {
    id?: true
    review_rating?: true
    value?: true
    km_min?: true
  }

  export type DriverSumAggregateInputType = {
    id?: true
    review_rating?: true
    value?: true
    km_min?: true
  }

  export type DriverMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    vehicle?: true
    review_rating?: true
    review_comment?: true
    value?: true
    km_min?: true
  }

  export type DriverMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    vehicle?: true
    review_rating?: true
    review_comment?: true
    value?: true
    km_min?: true
  }

  export type DriverCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    vehicle?: true
    review_rating?: true
    review_comment?: true
    value?: true
    km_min?: true
    _all?: true
  }

  export type DriverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Driver to aggregate.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Drivers
    **/
    _count?: true | DriverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DriverAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DriverSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DriverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DriverMaxAggregateInputType
  }

  export type GetDriverAggregateType<T extends DriverAggregateArgs> = {
        [P in keyof T & keyof AggregateDriver]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDriver[P]>
      : GetScalarType<T[P], AggregateDriver[P]>
  }




  export type DriverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DriverWhereInput
    orderBy?: DriverOrderByWithAggregationInput | DriverOrderByWithAggregationInput[]
    by: DriverScalarFieldEnum[] | DriverScalarFieldEnum
    having?: DriverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DriverCountAggregateInputType | true
    _avg?: DriverAvgAggregateInputType
    _sum?: DriverSumAggregateInputType
    _min?: DriverMinAggregateInputType
    _max?: DriverMaxAggregateInputType
  }

  export type DriverGroupByOutputType = {
    id: number
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
    _count: DriverCountAggregateOutputType | null
    _avg: DriverAvgAggregateOutputType | null
    _sum: DriverSumAggregateOutputType | null
    _min: DriverMinAggregateOutputType | null
    _max: DriverMaxAggregateOutputType | null
  }

  type GetDriverGroupByPayload<T extends DriverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DriverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DriverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DriverGroupByOutputType[P]>
            : GetScalarType<T[P], DriverGroupByOutputType[P]>
        }
      >
    >


  export type DriverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    vehicle?: boolean
    review_rating?: boolean
    review_comment?: boolean
    value?: boolean
    km_min?: boolean
    RideLog?: boolean | Driver$RideLogArgs<ExtArgs>
    RideRequest?: boolean | Driver$RideRequestArgs<ExtArgs>
    _count?: boolean | DriverCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["driver"]>

  export type DriverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    vehicle?: boolean
    review_rating?: boolean
    review_comment?: boolean
    value?: boolean
    km_min?: boolean
  }, ExtArgs["result"]["driver"]>

  export type DriverSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    vehicle?: boolean
    review_rating?: boolean
    review_comment?: boolean
    value?: boolean
    km_min?: boolean
  }

  export type DriverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    RideLog?: boolean | Driver$RideLogArgs<ExtArgs>
    RideRequest?: boolean | Driver$RideRequestArgs<ExtArgs>
    _count?: boolean | DriverCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DriverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DriverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Driver"
    objects: {
      RideLog: Prisma.$RideLogPayload<ExtArgs>[]
      RideRequest: Prisma.$RideRequestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      vehicle: string
      review_rating: number
      review_comment: string
      value: number
      km_min: number
    }, ExtArgs["result"]["driver"]>
    composites: {}
  }

  type DriverGetPayload<S extends boolean | null | undefined | DriverDefaultArgs> = $Result.GetResult<Prisma.$DriverPayload, S>

  type DriverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DriverFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DriverCountAggregateInputType | true
    }

  export interface DriverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Driver'], meta: { name: 'Driver' } }
    /**
     * Find zero or one Driver that matches the filter.
     * @param {DriverFindUniqueArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DriverFindUniqueArgs>(args: SelectSubset<T, DriverFindUniqueArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Driver that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DriverFindUniqueOrThrowArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DriverFindUniqueOrThrowArgs>(args: SelectSubset<T, DriverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Driver that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverFindFirstArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DriverFindFirstArgs>(args?: SelectSubset<T, DriverFindFirstArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Driver that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverFindFirstOrThrowArgs} args - Arguments to find a Driver
     * @example
     * // Get one Driver
     * const driver = await prisma.driver.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DriverFindFirstOrThrowArgs>(args?: SelectSubset<T, DriverFindFirstOrThrowArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Drivers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Drivers
     * const drivers = await prisma.driver.findMany()
     * 
     * // Get first 10 Drivers
     * const drivers = await prisma.driver.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const driverWithIdOnly = await prisma.driver.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DriverFindManyArgs>(args?: SelectSubset<T, DriverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Driver.
     * @param {DriverCreateArgs} args - Arguments to create a Driver.
     * @example
     * // Create one Driver
     * const Driver = await prisma.driver.create({
     *   data: {
     *     // ... data to create a Driver
     *   }
     * })
     * 
     */
    create<T extends DriverCreateArgs>(args: SelectSubset<T, DriverCreateArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Drivers.
     * @param {DriverCreateManyArgs} args - Arguments to create many Drivers.
     * @example
     * // Create many Drivers
     * const driver = await prisma.driver.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DriverCreateManyArgs>(args?: SelectSubset<T, DriverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Drivers and returns the data saved in the database.
     * @param {DriverCreateManyAndReturnArgs} args - Arguments to create many Drivers.
     * @example
     * // Create many Drivers
     * const driver = await prisma.driver.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Drivers and only return the `id`
     * const driverWithIdOnly = await prisma.driver.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DriverCreateManyAndReturnArgs>(args?: SelectSubset<T, DriverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Driver.
     * @param {DriverDeleteArgs} args - Arguments to delete one Driver.
     * @example
     * // Delete one Driver
     * const Driver = await prisma.driver.delete({
     *   where: {
     *     // ... filter to delete one Driver
     *   }
     * })
     * 
     */
    delete<T extends DriverDeleteArgs>(args: SelectSubset<T, DriverDeleteArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Driver.
     * @param {DriverUpdateArgs} args - Arguments to update one Driver.
     * @example
     * // Update one Driver
     * const driver = await prisma.driver.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DriverUpdateArgs>(args: SelectSubset<T, DriverUpdateArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Drivers.
     * @param {DriverDeleteManyArgs} args - Arguments to filter Drivers to delete.
     * @example
     * // Delete a few Drivers
     * const { count } = await prisma.driver.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DriverDeleteManyArgs>(args?: SelectSubset<T, DriverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Drivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Drivers
     * const driver = await prisma.driver.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DriverUpdateManyArgs>(args: SelectSubset<T, DriverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Driver.
     * @param {DriverUpsertArgs} args - Arguments to update or create a Driver.
     * @example
     * // Update or create a Driver
     * const driver = await prisma.driver.upsert({
     *   create: {
     *     // ... data to create a Driver
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Driver we want to update
     *   }
     * })
     */
    upsert<T extends DriverUpsertArgs>(args: SelectSubset<T, DriverUpsertArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Drivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverCountArgs} args - Arguments to filter Drivers to count.
     * @example
     * // Count the number of Drivers
     * const count = await prisma.driver.count({
     *   where: {
     *     // ... the filter for the Drivers we want to count
     *   }
     * })
    **/
    count<T extends DriverCountArgs>(
      args?: Subset<T, DriverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DriverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Driver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DriverAggregateArgs>(args: Subset<T, DriverAggregateArgs>): Prisma.PrismaPromise<GetDriverAggregateType<T>>

    /**
     * Group by Driver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DriverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DriverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DriverGroupByArgs['orderBy'] }
        : { orderBy?: DriverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DriverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDriverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Driver model
   */
  readonly fields: DriverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Driver.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DriverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    RideLog<T extends Driver$RideLogArgs<ExtArgs> = {}>(args?: Subset<T, Driver$RideLogArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "findMany"> | Null>
    RideRequest<T extends Driver$RideRequestArgs<ExtArgs> = {}>(args?: Subset<T, Driver$RideRequestArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Driver model
   */ 
  interface DriverFieldRefs {
    readonly id: FieldRef<"Driver", 'Int'>
    readonly name: FieldRef<"Driver", 'String'>
    readonly description: FieldRef<"Driver", 'String'>
    readonly vehicle: FieldRef<"Driver", 'String'>
    readonly review_rating: FieldRef<"Driver", 'Int'>
    readonly review_comment: FieldRef<"Driver", 'String'>
    readonly value: FieldRef<"Driver", 'Float'>
    readonly km_min: FieldRef<"Driver", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Driver findUnique
   */
  export type DriverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver findUniqueOrThrow
   */
  export type DriverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver findFirst
   */
  export type DriverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drivers.
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drivers.
     */
    distinct?: DriverScalarFieldEnum | DriverScalarFieldEnum[]
  }

  /**
   * Driver findFirstOrThrow
   */
  export type DriverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Driver to fetch.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Drivers.
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Drivers.
     */
    distinct?: DriverScalarFieldEnum | DriverScalarFieldEnum[]
  }

  /**
   * Driver findMany
   */
  export type DriverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter, which Drivers to fetch.
     */
    where?: DriverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Drivers to fetch.
     */
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Drivers.
     */
    cursor?: DriverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Drivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Drivers.
     */
    skip?: number
    distinct?: DriverScalarFieldEnum | DriverScalarFieldEnum[]
  }

  /**
   * Driver create
   */
  export type DriverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * The data needed to create a Driver.
     */
    data: XOR<DriverCreateInput, DriverUncheckedCreateInput>
  }

  /**
   * Driver createMany
   */
  export type DriverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Drivers.
     */
    data: DriverCreateManyInput | DriverCreateManyInput[]
  }

  /**
   * Driver createManyAndReturn
   */
  export type DriverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Drivers.
     */
    data: DriverCreateManyInput | DriverCreateManyInput[]
  }

  /**
   * Driver update
   */
  export type DriverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * The data needed to update a Driver.
     */
    data: XOR<DriverUpdateInput, DriverUncheckedUpdateInput>
    /**
     * Choose, which Driver to update.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver updateMany
   */
  export type DriverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Drivers.
     */
    data: XOR<DriverUpdateManyMutationInput, DriverUncheckedUpdateManyInput>
    /**
     * Filter which Drivers to update
     */
    where?: DriverWhereInput
  }

  /**
   * Driver upsert
   */
  export type DriverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * The filter to search for the Driver to update in case it exists.
     */
    where: DriverWhereUniqueInput
    /**
     * In case the Driver found by the `where` argument doesn't exist, create a new Driver with this data.
     */
    create: XOR<DriverCreateInput, DriverUncheckedCreateInput>
    /**
     * In case the Driver was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DriverUpdateInput, DriverUncheckedUpdateInput>
  }

  /**
   * Driver delete
   */
  export type DriverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    /**
     * Filter which Driver to delete.
     */
    where: DriverWhereUniqueInput
  }

  /**
   * Driver deleteMany
   */
  export type DriverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Drivers to delete
     */
    where?: DriverWhereInput
  }

  /**
   * Driver.RideLog
   */
  export type Driver$RideLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    where?: RideLogWhereInput
    orderBy?: RideLogOrderByWithRelationInput | RideLogOrderByWithRelationInput[]
    cursor?: RideLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RideLogScalarFieldEnum | RideLogScalarFieldEnum[]
  }

  /**
   * Driver.RideRequest
   */
  export type Driver$RideRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    where?: RideRequestWhereInput
    orderBy?: RideRequestOrderByWithRelationInput | RideRequestOrderByWithRelationInput[]
    cursor?: RideRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RideRequestScalarFieldEnum | RideRequestScalarFieldEnum[]
  }

  /**
   * Driver without action
   */
  export type DriverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
  }


  /**
   * Model RideRequest
   */

  export type AggregateRideRequest = {
    _count: RideRequestCountAggregateOutputType | null
    _avg: RideRequestAvgAggregateOutputType | null
    _sum: RideRequestSumAggregateOutputType | null
    _min: RideRequestMinAggregateOutputType | null
    _max: RideRequestMaxAggregateOutputType | null
  }

  export type RideRequestAvgAggregateOutputType = {
    id: number | null
    customer_id: number | null
    distance: number | null
  }

  export type RideRequestSumAggregateOutputType = {
    id: number | null
    customer_id: number | null
    distance: number | null
  }

  export type RideRequestMinAggregateOutputType = {
    id: number | null
    customer_id: number | null
    originLat: string | null
    originLng: string | null
    originAdress: string | null
    destinationLat: string | null
    destinationLng: string | null
    destinationAdress: string | null
    distance: number | null
    duration: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RideRequestMaxAggregateOutputType = {
    id: number | null
    customer_id: number | null
    originLat: string | null
    originLng: string | null
    originAdress: string | null
    destinationLat: string | null
    destinationLng: string | null
    destinationAdress: string | null
    distance: number | null
    duration: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RideRequestCountAggregateOutputType = {
    id: number
    customer_id: number
    originLat: number
    originLng: number
    originAdress: number
    destinationLat: number
    destinationLng: number
    destinationAdress: number
    distance: number
    duration: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RideRequestAvgAggregateInputType = {
    id?: true
    customer_id?: true
    distance?: true
  }

  export type RideRequestSumAggregateInputType = {
    id?: true
    customer_id?: true
    distance?: true
  }

  export type RideRequestMinAggregateInputType = {
    id?: true
    customer_id?: true
    originLat?: true
    originLng?: true
    originAdress?: true
    destinationLat?: true
    destinationLng?: true
    destinationAdress?: true
    distance?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RideRequestMaxAggregateInputType = {
    id?: true
    customer_id?: true
    originLat?: true
    originLng?: true
    originAdress?: true
    destinationLat?: true
    destinationLng?: true
    destinationAdress?: true
    distance?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RideRequestCountAggregateInputType = {
    id?: true
    customer_id?: true
    originLat?: true
    originLng?: true
    originAdress?: true
    destinationLat?: true
    destinationLng?: true
    destinationAdress?: true
    distance?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RideRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RideRequest to aggregate.
     */
    where?: RideRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideRequests to fetch.
     */
    orderBy?: RideRequestOrderByWithRelationInput | RideRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RideRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RideRequests
    **/
    _count?: true | RideRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RideRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RideRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RideRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RideRequestMaxAggregateInputType
  }

  export type GetRideRequestAggregateType<T extends RideRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateRideRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRideRequest[P]>
      : GetScalarType<T[P], AggregateRideRequest[P]>
  }




  export type RideRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideRequestWhereInput
    orderBy?: RideRequestOrderByWithAggregationInput | RideRequestOrderByWithAggregationInput[]
    by: RideRequestScalarFieldEnum[] | RideRequestScalarFieldEnum
    having?: RideRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RideRequestCountAggregateInputType | true
    _avg?: RideRequestAvgAggregateInputType
    _sum?: RideRequestSumAggregateInputType
    _min?: RideRequestMinAggregateInputType
    _max?: RideRequestMaxAggregateInputType
  }

  export type RideRequestGroupByOutputType = {
    id: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    createdAt: Date
    updatedAt: Date
    _count: RideRequestCountAggregateOutputType | null
    _avg: RideRequestAvgAggregateOutputType | null
    _sum: RideRequestSumAggregateOutputType | null
    _min: RideRequestMinAggregateOutputType | null
    _max: RideRequestMaxAggregateOutputType | null
  }

  type GetRideRequestGroupByPayload<T extends RideRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RideRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RideRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RideRequestGroupByOutputType[P]>
            : GetScalarType<T[P], RideRequestGroupByOutputType[P]>
        }
      >
    >


  export type RideRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customer_id?: boolean
    originLat?: boolean
    originLng?: boolean
    originAdress?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    destinationAdress?: boolean
    distance?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    options?: boolean | RideRequest$optionsArgs<ExtArgs>
    _count?: boolean | RideRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rideRequest"]>

  export type RideRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customer_id?: boolean
    originLat?: boolean
    originLng?: boolean
    originAdress?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    destinationAdress?: boolean
    distance?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["rideRequest"]>

  export type RideRequestSelectScalar = {
    id?: boolean
    customer_id?: boolean
    originLat?: boolean
    originLng?: boolean
    originAdress?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    destinationAdress?: boolean
    distance?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RideRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | RideRequest$optionsArgs<ExtArgs>
    _count?: boolean | RideRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RideRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RideRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RideRequest"
    objects: {
      options: Prisma.$DriverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customer_id: number
      originLat: string
      originLng: string
      originAdress: string
      destinationLat: string
      destinationLng: string
      destinationAdress: string
      distance: number
      duration: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rideRequest"]>
    composites: {}
  }

  type RideRequestGetPayload<S extends boolean | null | undefined | RideRequestDefaultArgs> = $Result.GetResult<Prisma.$RideRequestPayload, S>

  type RideRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RideRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RideRequestCountAggregateInputType | true
    }

  export interface RideRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RideRequest'], meta: { name: 'RideRequest' } }
    /**
     * Find zero or one RideRequest that matches the filter.
     * @param {RideRequestFindUniqueArgs} args - Arguments to find a RideRequest
     * @example
     * // Get one RideRequest
     * const rideRequest = await prisma.rideRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RideRequestFindUniqueArgs>(args: SelectSubset<T, RideRequestFindUniqueArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RideRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RideRequestFindUniqueOrThrowArgs} args - Arguments to find a RideRequest
     * @example
     * // Get one RideRequest
     * const rideRequest = await prisma.rideRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RideRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, RideRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RideRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideRequestFindFirstArgs} args - Arguments to find a RideRequest
     * @example
     * // Get one RideRequest
     * const rideRequest = await prisma.rideRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RideRequestFindFirstArgs>(args?: SelectSubset<T, RideRequestFindFirstArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RideRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideRequestFindFirstOrThrowArgs} args - Arguments to find a RideRequest
     * @example
     * // Get one RideRequest
     * const rideRequest = await prisma.rideRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RideRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, RideRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RideRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RideRequests
     * const rideRequests = await prisma.rideRequest.findMany()
     * 
     * // Get first 10 RideRequests
     * const rideRequests = await prisma.rideRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rideRequestWithIdOnly = await prisma.rideRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RideRequestFindManyArgs>(args?: SelectSubset<T, RideRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RideRequest.
     * @param {RideRequestCreateArgs} args - Arguments to create a RideRequest.
     * @example
     * // Create one RideRequest
     * const RideRequest = await prisma.rideRequest.create({
     *   data: {
     *     // ... data to create a RideRequest
     *   }
     * })
     * 
     */
    create<T extends RideRequestCreateArgs>(args: SelectSubset<T, RideRequestCreateArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RideRequests.
     * @param {RideRequestCreateManyArgs} args - Arguments to create many RideRequests.
     * @example
     * // Create many RideRequests
     * const rideRequest = await prisma.rideRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RideRequestCreateManyArgs>(args?: SelectSubset<T, RideRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RideRequests and returns the data saved in the database.
     * @param {RideRequestCreateManyAndReturnArgs} args - Arguments to create many RideRequests.
     * @example
     * // Create many RideRequests
     * const rideRequest = await prisma.rideRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RideRequests and only return the `id`
     * const rideRequestWithIdOnly = await prisma.rideRequest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RideRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, RideRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RideRequest.
     * @param {RideRequestDeleteArgs} args - Arguments to delete one RideRequest.
     * @example
     * // Delete one RideRequest
     * const RideRequest = await prisma.rideRequest.delete({
     *   where: {
     *     // ... filter to delete one RideRequest
     *   }
     * })
     * 
     */
    delete<T extends RideRequestDeleteArgs>(args: SelectSubset<T, RideRequestDeleteArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RideRequest.
     * @param {RideRequestUpdateArgs} args - Arguments to update one RideRequest.
     * @example
     * // Update one RideRequest
     * const rideRequest = await prisma.rideRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RideRequestUpdateArgs>(args: SelectSubset<T, RideRequestUpdateArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RideRequests.
     * @param {RideRequestDeleteManyArgs} args - Arguments to filter RideRequests to delete.
     * @example
     * // Delete a few RideRequests
     * const { count } = await prisma.rideRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RideRequestDeleteManyArgs>(args?: SelectSubset<T, RideRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RideRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RideRequests
     * const rideRequest = await prisma.rideRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RideRequestUpdateManyArgs>(args: SelectSubset<T, RideRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RideRequest.
     * @param {RideRequestUpsertArgs} args - Arguments to update or create a RideRequest.
     * @example
     * // Update or create a RideRequest
     * const rideRequest = await prisma.rideRequest.upsert({
     *   create: {
     *     // ... data to create a RideRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RideRequest we want to update
     *   }
     * })
     */
    upsert<T extends RideRequestUpsertArgs>(args: SelectSubset<T, RideRequestUpsertArgs<ExtArgs>>): Prisma__RideRequestClient<$Result.GetResult<Prisma.$RideRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RideRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideRequestCountArgs} args - Arguments to filter RideRequests to count.
     * @example
     * // Count the number of RideRequests
     * const count = await prisma.rideRequest.count({
     *   where: {
     *     // ... the filter for the RideRequests we want to count
     *   }
     * })
    **/
    count<T extends RideRequestCountArgs>(
      args?: Subset<T, RideRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RideRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RideRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RideRequestAggregateArgs>(args: Subset<T, RideRequestAggregateArgs>): Prisma.PrismaPromise<GetRideRequestAggregateType<T>>

    /**
     * Group by RideRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RideRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RideRequestGroupByArgs['orderBy'] }
        : { orderBy?: RideRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RideRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRideRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RideRequest model
   */
  readonly fields: RideRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RideRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RideRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    options<T extends RideRequest$optionsArgs<ExtArgs> = {}>(args?: Subset<T, RideRequest$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RideRequest model
   */ 
  interface RideRequestFieldRefs {
    readonly id: FieldRef<"RideRequest", 'Int'>
    readonly customer_id: FieldRef<"RideRequest", 'Int'>
    readonly originLat: FieldRef<"RideRequest", 'String'>
    readonly originLng: FieldRef<"RideRequest", 'String'>
    readonly originAdress: FieldRef<"RideRequest", 'String'>
    readonly destinationLat: FieldRef<"RideRequest", 'String'>
    readonly destinationLng: FieldRef<"RideRequest", 'String'>
    readonly destinationAdress: FieldRef<"RideRequest", 'String'>
    readonly distance: FieldRef<"RideRequest", 'Float'>
    readonly duration: FieldRef<"RideRequest", 'String'>
    readonly createdAt: FieldRef<"RideRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"RideRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RideRequest findUnique
   */
  export type RideRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * Filter, which RideRequest to fetch.
     */
    where: RideRequestWhereUniqueInput
  }

  /**
   * RideRequest findUniqueOrThrow
   */
  export type RideRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * Filter, which RideRequest to fetch.
     */
    where: RideRequestWhereUniqueInput
  }

  /**
   * RideRequest findFirst
   */
  export type RideRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * Filter, which RideRequest to fetch.
     */
    where?: RideRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideRequests to fetch.
     */
    orderBy?: RideRequestOrderByWithRelationInput | RideRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RideRequests.
     */
    cursor?: RideRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RideRequests.
     */
    distinct?: RideRequestScalarFieldEnum | RideRequestScalarFieldEnum[]
  }

  /**
   * RideRequest findFirstOrThrow
   */
  export type RideRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * Filter, which RideRequest to fetch.
     */
    where?: RideRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideRequests to fetch.
     */
    orderBy?: RideRequestOrderByWithRelationInput | RideRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RideRequests.
     */
    cursor?: RideRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RideRequests.
     */
    distinct?: RideRequestScalarFieldEnum | RideRequestScalarFieldEnum[]
  }

  /**
   * RideRequest findMany
   */
  export type RideRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * Filter, which RideRequests to fetch.
     */
    where?: RideRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideRequests to fetch.
     */
    orderBy?: RideRequestOrderByWithRelationInput | RideRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RideRequests.
     */
    cursor?: RideRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideRequests.
     */
    skip?: number
    distinct?: RideRequestScalarFieldEnum | RideRequestScalarFieldEnum[]
  }

  /**
   * RideRequest create
   */
  export type RideRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a RideRequest.
     */
    data: XOR<RideRequestCreateInput, RideRequestUncheckedCreateInput>
  }

  /**
   * RideRequest createMany
   */
  export type RideRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RideRequests.
     */
    data: RideRequestCreateManyInput | RideRequestCreateManyInput[]
  }

  /**
   * RideRequest createManyAndReturn
   */
  export type RideRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RideRequests.
     */
    data: RideRequestCreateManyInput | RideRequestCreateManyInput[]
  }

  /**
   * RideRequest update
   */
  export type RideRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a RideRequest.
     */
    data: XOR<RideRequestUpdateInput, RideRequestUncheckedUpdateInput>
    /**
     * Choose, which RideRequest to update.
     */
    where: RideRequestWhereUniqueInput
  }

  /**
   * RideRequest updateMany
   */
  export type RideRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RideRequests.
     */
    data: XOR<RideRequestUpdateManyMutationInput, RideRequestUncheckedUpdateManyInput>
    /**
     * Filter which RideRequests to update
     */
    where?: RideRequestWhereInput
  }

  /**
   * RideRequest upsert
   */
  export type RideRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the RideRequest to update in case it exists.
     */
    where: RideRequestWhereUniqueInput
    /**
     * In case the RideRequest found by the `where` argument doesn't exist, create a new RideRequest with this data.
     */
    create: XOR<RideRequestCreateInput, RideRequestUncheckedCreateInput>
    /**
     * In case the RideRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RideRequestUpdateInput, RideRequestUncheckedUpdateInput>
  }

  /**
   * RideRequest delete
   */
  export type RideRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
    /**
     * Filter which RideRequest to delete.
     */
    where: RideRequestWhereUniqueInput
  }

  /**
   * RideRequest deleteMany
   */
  export type RideRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RideRequests to delete
     */
    where?: RideRequestWhereInput
  }

  /**
   * RideRequest.options
   */
  export type RideRequest$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Driver
     */
    select?: DriverSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DriverInclude<ExtArgs> | null
    where?: DriverWhereInput
    orderBy?: DriverOrderByWithRelationInput | DriverOrderByWithRelationInput[]
    cursor?: DriverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DriverScalarFieldEnum | DriverScalarFieldEnum[]
  }

  /**
   * RideRequest without action
   */
  export type RideRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideRequest
     */
    select?: RideRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideRequestInclude<ExtArgs> | null
  }


  /**
   * Model RideLog
   */

  export type AggregateRideLog = {
    _count: RideLogCountAggregateOutputType | null
    _avg: RideLogAvgAggregateOutputType | null
    _sum: RideLogSumAggregateOutputType | null
    _min: RideLogMinAggregateOutputType | null
    _max: RideLogMaxAggregateOutputType | null
  }

  export type RideLogAvgAggregateOutputType = {
    id: number | null
    customer_id: number | null
    distance: number | null
    driverId: number | null
    value: number | null
  }

  export type RideLogSumAggregateOutputType = {
    id: number | null
    customer_id: number | null
    distance: number | null
    driverId: number | null
    value: number | null
  }

  export type RideLogMinAggregateOutputType = {
    id: number | null
    customer_id: number | null
    originLat: string | null
    originLng: string | null
    originAdress: string | null
    destinationLat: string | null
    destinationLng: string | null
    destinationAdress: string | null
    distance: number | null
    duration: string | null
    driverId: number | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RideLogMaxAggregateOutputType = {
    id: number | null
    customer_id: number | null
    originLat: string | null
    originLng: string | null
    originAdress: string | null
    destinationLat: string | null
    destinationLng: string | null
    destinationAdress: string | null
    distance: number | null
    duration: string | null
    driverId: number | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RideLogCountAggregateOutputType = {
    id: number
    customer_id: number
    originLat: number
    originLng: number
    originAdress: number
    destinationLat: number
    destinationLng: number
    destinationAdress: number
    distance: number
    duration: number
    driverId: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RideLogAvgAggregateInputType = {
    id?: true
    customer_id?: true
    distance?: true
    driverId?: true
    value?: true
  }

  export type RideLogSumAggregateInputType = {
    id?: true
    customer_id?: true
    distance?: true
    driverId?: true
    value?: true
  }

  export type RideLogMinAggregateInputType = {
    id?: true
    customer_id?: true
    originLat?: true
    originLng?: true
    originAdress?: true
    destinationLat?: true
    destinationLng?: true
    destinationAdress?: true
    distance?: true
    duration?: true
    driverId?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RideLogMaxAggregateInputType = {
    id?: true
    customer_id?: true
    originLat?: true
    originLng?: true
    originAdress?: true
    destinationLat?: true
    destinationLng?: true
    destinationAdress?: true
    distance?: true
    duration?: true
    driverId?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RideLogCountAggregateInputType = {
    id?: true
    customer_id?: true
    originLat?: true
    originLng?: true
    originAdress?: true
    destinationLat?: true
    destinationLng?: true
    destinationAdress?: true
    distance?: true
    duration?: true
    driverId?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RideLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RideLog to aggregate.
     */
    where?: RideLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideLogs to fetch.
     */
    orderBy?: RideLogOrderByWithRelationInput | RideLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RideLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RideLogs
    **/
    _count?: true | RideLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RideLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RideLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RideLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RideLogMaxAggregateInputType
  }

  export type GetRideLogAggregateType<T extends RideLogAggregateArgs> = {
        [P in keyof T & keyof AggregateRideLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRideLog[P]>
      : GetScalarType<T[P], AggregateRideLog[P]>
  }




  export type RideLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RideLogWhereInput
    orderBy?: RideLogOrderByWithAggregationInput | RideLogOrderByWithAggregationInput[]
    by: RideLogScalarFieldEnum[] | RideLogScalarFieldEnum
    having?: RideLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RideLogCountAggregateInputType | true
    _avg?: RideLogAvgAggregateInputType
    _sum?: RideLogSumAggregateInputType
    _min?: RideLogMinAggregateInputType
    _max?: RideLogMaxAggregateInputType
  }

  export type RideLogGroupByOutputType = {
    id: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    driverId: number
    value: number
    createdAt: Date
    updatedAt: Date
    _count: RideLogCountAggregateOutputType | null
    _avg: RideLogAvgAggregateOutputType | null
    _sum: RideLogSumAggregateOutputType | null
    _min: RideLogMinAggregateOutputType | null
    _max: RideLogMaxAggregateOutputType | null
  }

  type GetRideLogGroupByPayload<T extends RideLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RideLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RideLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RideLogGroupByOutputType[P]>
            : GetScalarType<T[P], RideLogGroupByOutputType[P]>
        }
      >
    >


  export type RideLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customer_id?: boolean
    originLat?: boolean
    originLng?: boolean
    originAdress?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    destinationAdress?: boolean
    distance?: boolean
    duration?: boolean
    driverId?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rideLog"]>

  export type RideLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customer_id?: boolean
    originLat?: boolean
    originLng?: boolean
    originAdress?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    destinationAdress?: boolean
    distance?: boolean
    duration?: boolean
    driverId?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rideLog"]>

  export type RideLogSelectScalar = {
    id?: boolean
    customer_id?: boolean
    originLat?: boolean
    originLng?: boolean
    originAdress?: boolean
    destinationLat?: boolean
    destinationLng?: boolean
    destinationAdress?: boolean
    distance?: boolean
    duration?: boolean
    driverId?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RideLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }
  export type RideLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    driver?: boolean | DriverDefaultArgs<ExtArgs>
  }

  export type $RideLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RideLog"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      driver: Prisma.$DriverPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customer_id: number
      originLat: string
      originLng: string
      originAdress: string
      destinationLat: string
      destinationLng: string
      destinationAdress: string
      distance: number
      duration: string
      driverId: number
      value: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rideLog"]>
    composites: {}
  }

  type RideLogGetPayload<S extends boolean | null | undefined | RideLogDefaultArgs> = $Result.GetResult<Prisma.$RideLogPayload, S>

  type RideLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RideLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RideLogCountAggregateInputType | true
    }

  export interface RideLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RideLog'], meta: { name: 'RideLog' } }
    /**
     * Find zero or one RideLog that matches the filter.
     * @param {RideLogFindUniqueArgs} args - Arguments to find a RideLog
     * @example
     * // Get one RideLog
     * const rideLog = await prisma.rideLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RideLogFindUniqueArgs>(args: SelectSubset<T, RideLogFindUniqueArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RideLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RideLogFindUniqueOrThrowArgs} args - Arguments to find a RideLog
     * @example
     * // Get one RideLog
     * const rideLog = await prisma.rideLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RideLogFindUniqueOrThrowArgs>(args: SelectSubset<T, RideLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RideLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideLogFindFirstArgs} args - Arguments to find a RideLog
     * @example
     * // Get one RideLog
     * const rideLog = await prisma.rideLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RideLogFindFirstArgs>(args?: SelectSubset<T, RideLogFindFirstArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RideLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideLogFindFirstOrThrowArgs} args - Arguments to find a RideLog
     * @example
     * // Get one RideLog
     * const rideLog = await prisma.rideLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RideLogFindFirstOrThrowArgs>(args?: SelectSubset<T, RideLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RideLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RideLogs
     * const rideLogs = await prisma.rideLog.findMany()
     * 
     * // Get first 10 RideLogs
     * const rideLogs = await prisma.rideLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rideLogWithIdOnly = await prisma.rideLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RideLogFindManyArgs>(args?: SelectSubset<T, RideLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RideLog.
     * @param {RideLogCreateArgs} args - Arguments to create a RideLog.
     * @example
     * // Create one RideLog
     * const RideLog = await prisma.rideLog.create({
     *   data: {
     *     // ... data to create a RideLog
     *   }
     * })
     * 
     */
    create<T extends RideLogCreateArgs>(args: SelectSubset<T, RideLogCreateArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RideLogs.
     * @param {RideLogCreateManyArgs} args - Arguments to create many RideLogs.
     * @example
     * // Create many RideLogs
     * const rideLog = await prisma.rideLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RideLogCreateManyArgs>(args?: SelectSubset<T, RideLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RideLogs and returns the data saved in the database.
     * @param {RideLogCreateManyAndReturnArgs} args - Arguments to create many RideLogs.
     * @example
     * // Create many RideLogs
     * const rideLog = await prisma.rideLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RideLogs and only return the `id`
     * const rideLogWithIdOnly = await prisma.rideLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RideLogCreateManyAndReturnArgs>(args?: SelectSubset<T, RideLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RideLog.
     * @param {RideLogDeleteArgs} args - Arguments to delete one RideLog.
     * @example
     * // Delete one RideLog
     * const RideLog = await prisma.rideLog.delete({
     *   where: {
     *     // ... filter to delete one RideLog
     *   }
     * })
     * 
     */
    delete<T extends RideLogDeleteArgs>(args: SelectSubset<T, RideLogDeleteArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RideLog.
     * @param {RideLogUpdateArgs} args - Arguments to update one RideLog.
     * @example
     * // Update one RideLog
     * const rideLog = await prisma.rideLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RideLogUpdateArgs>(args: SelectSubset<T, RideLogUpdateArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RideLogs.
     * @param {RideLogDeleteManyArgs} args - Arguments to filter RideLogs to delete.
     * @example
     * // Delete a few RideLogs
     * const { count } = await prisma.rideLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RideLogDeleteManyArgs>(args?: SelectSubset<T, RideLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RideLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RideLogs
     * const rideLog = await prisma.rideLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RideLogUpdateManyArgs>(args: SelectSubset<T, RideLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RideLog.
     * @param {RideLogUpsertArgs} args - Arguments to update or create a RideLog.
     * @example
     * // Update or create a RideLog
     * const rideLog = await prisma.rideLog.upsert({
     *   create: {
     *     // ... data to create a RideLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RideLog we want to update
     *   }
     * })
     */
    upsert<T extends RideLogUpsertArgs>(args: SelectSubset<T, RideLogUpsertArgs<ExtArgs>>): Prisma__RideLogClient<$Result.GetResult<Prisma.$RideLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RideLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideLogCountArgs} args - Arguments to filter RideLogs to count.
     * @example
     * // Count the number of RideLogs
     * const count = await prisma.rideLog.count({
     *   where: {
     *     // ... the filter for the RideLogs we want to count
     *   }
     * })
    **/
    count<T extends RideLogCountArgs>(
      args?: Subset<T, RideLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RideLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RideLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RideLogAggregateArgs>(args: Subset<T, RideLogAggregateArgs>): Prisma.PrismaPromise<GetRideLogAggregateType<T>>

    /**
     * Group by RideLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RideLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RideLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RideLogGroupByArgs['orderBy'] }
        : { orderBy?: RideLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RideLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRideLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RideLog model
   */
  readonly fields: RideLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RideLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RideLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    driver<T extends DriverDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DriverDefaultArgs<ExtArgs>>): Prisma__DriverClient<$Result.GetResult<Prisma.$DriverPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RideLog model
   */ 
  interface RideLogFieldRefs {
    readonly id: FieldRef<"RideLog", 'Int'>
    readonly customer_id: FieldRef<"RideLog", 'Int'>
    readonly originLat: FieldRef<"RideLog", 'String'>
    readonly originLng: FieldRef<"RideLog", 'String'>
    readonly originAdress: FieldRef<"RideLog", 'String'>
    readonly destinationLat: FieldRef<"RideLog", 'String'>
    readonly destinationLng: FieldRef<"RideLog", 'String'>
    readonly destinationAdress: FieldRef<"RideLog", 'String'>
    readonly distance: FieldRef<"RideLog", 'Float'>
    readonly duration: FieldRef<"RideLog", 'String'>
    readonly driverId: FieldRef<"RideLog", 'Int'>
    readonly value: FieldRef<"RideLog", 'Float'>
    readonly createdAt: FieldRef<"RideLog", 'DateTime'>
    readonly updatedAt: FieldRef<"RideLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RideLog findUnique
   */
  export type RideLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * Filter, which RideLog to fetch.
     */
    where: RideLogWhereUniqueInput
  }

  /**
   * RideLog findUniqueOrThrow
   */
  export type RideLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * Filter, which RideLog to fetch.
     */
    where: RideLogWhereUniqueInput
  }

  /**
   * RideLog findFirst
   */
  export type RideLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * Filter, which RideLog to fetch.
     */
    where?: RideLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideLogs to fetch.
     */
    orderBy?: RideLogOrderByWithRelationInput | RideLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RideLogs.
     */
    cursor?: RideLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RideLogs.
     */
    distinct?: RideLogScalarFieldEnum | RideLogScalarFieldEnum[]
  }

  /**
   * RideLog findFirstOrThrow
   */
  export type RideLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * Filter, which RideLog to fetch.
     */
    where?: RideLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideLogs to fetch.
     */
    orderBy?: RideLogOrderByWithRelationInput | RideLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RideLogs.
     */
    cursor?: RideLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RideLogs.
     */
    distinct?: RideLogScalarFieldEnum | RideLogScalarFieldEnum[]
  }

  /**
   * RideLog findMany
   */
  export type RideLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * Filter, which RideLogs to fetch.
     */
    where?: RideLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RideLogs to fetch.
     */
    orderBy?: RideLogOrderByWithRelationInput | RideLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RideLogs.
     */
    cursor?: RideLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RideLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RideLogs.
     */
    skip?: number
    distinct?: RideLogScalarFieldEnum | RideLogScalarFieldEnum[]
  }

  /**
   * RideLog create
   */
  export type RideLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * The data needed to create a RideLog.
     */
    data: XOR<RideLogCreateInput, RideLogUncheckedCreateInput>
  }

  /**
   * RideLog createMany
   */
  export type RideLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RideLogs.
     */
    data: RideLogCreateManyInput | RideLogCreateManyInput[]
  }

  /**
   * RideLog createManyAndReturn
   */
  export type RideLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RideLogs.
     */
    data: RideLogCreateManyInput | RideLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RideLog update
   */
  export type RideLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * The data needed to update a RideLog.
     */
    data: XOR<RideLogUpdateInput, RideLogUncheckedUpdateInput>
    /**
     * Choose, which RideLog to update.
     */
    where: RideLogWhereUniqueInput
  }

  /**
   * RideLog updateMany
   */
  export type RideLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RideLogs.
     */
    data: XOR<RideLogUpdateManyMutationInput, RideLogUncheckedUpdateManyInput>
    /**
     * Filter which RideLogs to update
     */
    where?: RideLogWhereInput
  }

  /**
   * RideLog upsert
   */
  export type RideLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * The filter to search for the RideLog to update in case it exists.
     */
    where: RideLogWhereUniqueInput
    /**
     * In case the RideLog found by the `where` argument doesn't exist, create a new RideLog with this data.
     */
    create: XOR<RideLogCreateInput, RideLogUncheckedCreateInput>
    /**
     * In case the RideLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RideLogUpdateInput, RideLogUncheckedUpdateInput>
  }

  /**
   * RideLog delete
   */
  export type RideLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
    /**
     * Filter which RideLog to delete.
     */
    where: RideLogWhereUniqueInput
  }

  /**
   * RideLog deleteMany
   */
  export type RideLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RideLogs to delete
     */
    where?: RideLogWhereInput
  }

  /**
   * RideLog without action
   */
  export type RideLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RideLog
     */
    select?: RideLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RideLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const DriverScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    vehicle: 'vehicle',
    review_rating: 'review_rating',
    review_comment: 'review_comment',
    value: 'value',
    km_min: 'km_min'
  };

  export type DriverScalarFieldEnum = (typeof DriverScalarFieldEnum)[keyof typeof DriverScalarFieldEnum]


  export const RideRequestScalarFieldEnum: {
    id: 'id',
    customer_id: 'customer_id',
    originLat: 'originLat',
    originLng: 'originLng',
    originAdress: 'originAdress',
    destinationLat: 'destinationLat',
    destinationLng: 'destinationLng',
    destinationAdress: 'destinationAdress',
    distance: 'distance',
    duration: 'duration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RideRequestScalarFieldEnum = (typeof RideRequestScalarFieldEnum)[keyof typeof RideRequestScalarFieldEnum]


  export const RideLogScalarFieldEnum: {
    id: 'id',
    customer_id: 'customer_id',
    originLat: 'originLat',
    originLng: 'originLng',
    originAdress: 'originAdress',
    destinationLat: 'destinationLat',
    destinationLng: 'destinationLng',
    destinationAdress: 'destinationAdress',
    distance: 'distance',
    duration: 'duration',
    driverId: 'driverId',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RideLogScalarFieldEnum = (typeof RideLogScalarFieldEnum)[keyof typeof RideLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    name?: StringFilter<"Customer"> | string
    RideLog?: RideLogListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    RideLog?: RideLogOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    RideLog?: RideLogListRelationFilter
  }, "id">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    name?: StringWithAggregatesFilter<"Customer"> | string
  }

  export type DriverWhereInput = {
    AND?: DriverWhereInput | DriverWhereInput[]
    OR?: DriverWhereInput[]
    NOT?: DriverWhereInput | DriverWhereInput[]
    id?: IntFilter<"Driver"> | number
    name?: StringFilter<"Driver"> | string
    description?: StringFilter<"Driver"> | string
    vehicle?: StringFilter<"Driver"> | string
    review_rating?: IntFilter<"Driver"> | number
    review_comment?: StringFilter<"Driver"> | string
    value?: FloatFilter<"Driver"> | number
    km_min?: IntFilter<"Driver"> | number
    RideLog?: RideLogListRelationFilter
    RideRequest?: RideRequestListRelationFilter
  }

  export type DriverOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    vehicle?: SortOrder
    review_rating?: SortOrder
    review_comment?: SortOrder
    value?: SortOrder
    km_min?: SortOrder
    RideLog?: RideLogOrderByRelationAggregateInput
    RideRequest?: RideRequestOrderByRelationAggregateInput
  }

  export type DriverWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DriverWhereInput | DriverWhereInput[]
    OR?: DriverWhereInput[]
    NOT?: DriverWhereInput | DriverWhereInput[]
    name?: StringFilter<"Driver"> | string
    description?: StringFilter<"Driver"> | string
    vehicle?: StringFilter<"Driver"> | string
    review_rating?: IntFilter<"Driver"> | number
    review_comment?: StringFilter<"Driver"> | string
    value?: FloatFilter<"Driver"> | number
    km_min?: IntFilter<"Driver"> | number
    RideLog?: RideLogListRelationFilter
    RideRequest?: RideRequestListRelationFilter
  }, "id">

  export type DriverOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    vehicle?: SortOrder
    review_rating?: SortOrder
    review_comment?: SortOrder
    value?: SortOrder
    km_min?: SortOrder
    _count?: DriverCountOrderByAggregateInput
    _avg?: DriverAvgOrderByAggregateInput
    _max?: DriverMaxOrderByAggregateInput
    _min?: DriverMinOrderByAggregateInput
    _sum?: DriverSumOrderByAggregateInput
  }

  export type DriverScalarWhereWithAggregatesInput = {
    AND?: DriverScalarWhereWithAggregatesInput | DriverScalarWhereWithAggregatesInput[]
    OR?: DriverScalarWhereWithAggregatesInput[]
    NOT?: DriverScalarWhereWithAggregatesInput | DriverScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Driver"> | number
    name?: StringWithAggregatesFilter<"Driver"> | string
    description?: StringWithAggregatesFilter<"Driver"> | string
    vehicle?: StringWithAggregatesFilter<"Driver"> | string
    review_rating?: IntWithAggregatesFilter<"Driver"> | number
    review_comment?: StringWithAggregatesFilter<"Driver"> | string
    value?: FloatWithAggregatesFilter<"Driver"> | number
    km_min?: IntWithAggregatesFilter<"Driver"> | number
  }

  export type RideRequestWhereInput = {
    AND?: RideRequestWhereInput | RideRequestWhereInput[]
    OR?: RideRequestWhereInput[]
    NOT?: RideRequestWhereInput | RideRequestWhereInput[]
    id?: IntFilter<"RideRequest"> | number
    customer_id?: IntFilter<"RideRequest"> | number
    originLat?: StringFilter<"RideRequest"> | string
    originLng?: StringFilter<"RideRequest"> | string
    originAdress?: StringFilter<"RideRequest"> | string
    destinationLat?: StringFilter<"RideRequest"> | string
    destinationLng?: StringFilter<"RideRequest"> | string
    destinationAdress?: StringFilter<"RideRequest"> | string
    distance?: FloatFilter<"RideRequest"> | number
    duration?: StringFilter<"RideRequest"> | string
    createdAt?: DateTimeFilter<"RideRequest"> | Date | string
    updatedAt?: DateTimeFilter<"RideRequest"> | Date | string
    options?: DriverListRelationFilter
  }

  export type RideRequestOrderByWithRelationInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    options?: DriverOrderByRelationAggregateInput
  }

  export type RideRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RideRequestWhereInput | RideRequestWhereInput[]
    OR?: RideRequestWhereInput[]
    NOT?: RideRequestWhereInput | RideRequestWhereInput[]
    customer_id?: IntFilter<"RideRequest"> | number
    originLat?: StringFilter<"RideRequest"> | string
    originLng?: StringFilter<"RideRequest"> | string
    originAdress?: StringFilter<"RideRequest"> | string
    destinationLat?: StringFilter<"RideRequest"> | string
    destinationLng?: StringFilter<"RideRequest"> | string
    destinationAdress?: StringFilter<"RideRequest"> | string
    distance?: FloatFilter<"RideRequest"> | number
    duration?: StringFilter<"RideRequest"> | string
    createdAt?: DateTimeFilter<"RideRequest"> | Date | string
    updatedAt?: DateTimeFilter<"RideRequest"> | Date | string
    options?: DriverListRelationFilter
  }, "id">

  export type RideRequestOrderByWithAggregationInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RideRequestCountOrderByAggregateInput
    _avg?: RideRequestAvgOrderByAggregateInput
    _max?: RideRequestMaxOrderByAggregateInput
    _min?: RideRequestMinOrderByAggregateInput
    _sum?: RideRequestSumOrderByAggregateInput
  }

  export type RideRequestScalarWhereWithAggregatesInput = {
    AND?: RideRequestScalarWhereWithAggregatesInput | RideRequestScalarWhereWithAggregatesInput[]
    OR?: RideRequestScalarWhereWithAggregatesInput[]
    NOT?: RideRequestScalarWhereWithAggregatesInput | RideRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RideRequest"> | number
    customer_id?: IntWithAggregatesFilter<"RideRequest"> | number
    originLat?: StringWithAggregatesFilter<"RideRequest"> | string
    originLng?: StringWithAggregatesFilter<"RideRequest"> | string
    originAdress?: StringWithAggregatesFilter<"RideRequest"> | string
    destinationLat?: StringWithAggregatesFilter<"RideRequest"> | string
    destinationLng?: StringWithAggregatesFilter<"RideRequest"> | string
    destinationAdress?: StringWithAggregatesFilter<"RideRequest"> | string
    distance?: FloatWithAggregatesFilter<"RideRequest"> | number
    duration?: StringWithAggregatesFilter<"RideRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"RideRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RideRequest"> | Date | string
  }

  export type RideLogWhereInput = {
    AND?: RideLogWhereInput | RideLogWhereInput[]
    OR?: RideLogWhereInput[]
    NOT?: RideLogWhereInput | RideLogWhereInput[]
    id?: IntFilter<"RideLog"> | number
    customer_id?: IntFilter<"RideLog"> | number
    originLat?: StringFilter<"RideLog"> | string
    originLng?: StringFilter<"RideLog"> | string
    originAdress?: StringFilter<"RideLog"> | string
    destinationLat?: StringFilter<"RideLog"> | string
    destinationLng?: StringFilter<"RideLog"> | string
    destinationAdress?: StringFilter<"RideLog"> | string
    distance?: FloatFilter<"RideLog"> | number
    duration?: StringFilter<"RideLog"> | string
    driverId?: IntFilter<"RideLog"> | number
    value?: FloatFilter<"RideLog"> | number
    createdAt?: DateTimeFilter<"RideLog"> | Date | string
    updatedAt?: DateTimeFilter<"RideLog"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    driver?: XOR<DriverRelationFilter, DriverWhereInput>
  }

  export type RideLogOrderByWithRelationInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    driverId?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    driver?: DriverOrderByWithRelationInput
  }

  export type RideLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RideLogWhereInput | RideLogWhereInput[]
    OR?: RideLogWhereInput[]
    NOT?: RideLogWhereInput | RideLogWhereInput[]
    customer_id?: IntFilter<"RideLog"> | number
    originLat?: StringFilter<"RideLog"> | string
    originLng?: StringFilter<"RideLog"> | string
    originAdress?: StringFilter<"RideLog"> | string
    destinationLat?: StringFilter<"RideLog"> | string
    destinationLng?: StringFilter<"RideLog"> | string
    destinationAdress?: StringFilter<"RideLog"> | string
    distance?: FloatFilter<"RideLog"> | number
    duration?: StringFilter<"RideLog"> | string
    driverId?: IntFilter<"RideLog"> | number
    value?: FloatFilter<"RideLog"> | number
    createdAt?: DateTimeFilter<"RideLog"> | Date | string
    updatedAt?: DateTimeFilter<"RideLog"> | Date | string
    customer?: XOR<CustomerRelationFilter, CustomerWhereInput>
    driver?: XOR<DriverRelationFilter, DriverWhereInput>
  }, "id">

  export type RideLogOrderByWithAggregationInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    driverId?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RideLogCountOrderByAggregateInput
    _avg?: RideLogAvgOrderByAggregateInput
    _max?: RideLogMaxOrderByAggregateInput
    _min?: RideLogMinOrderByAggregateInput
    _sum?: RideLogSumOrderByAggregateInput
  }

  export type RideLogScalarWhereWithAggregatesInput = {
    AND?: RideLogScalarWhereWithAggregatesInput | RideLogScalarWhereWithAggregatesInput[]
    OR?: RideLogScalarWhereWithAggregatesInput[]
    NOT?: RideLogScalarWhereWithAggregatesInput | RideLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RideLog"> | number
    customer_id?: IntWithAggregatesFilter<"RideLog"> | number
    originLat?: StringWithAggregatesFilter<"RideLog"> | string
    originLng?: StringWithAggregatesFilter<"RideLog"> | string
    originAdress?: StringWithAggregatesFilter<"RideLog"> | string
    destinationLat?: StringWithAggregatesFilter<"RideLog"> | string
    destinationLng?: StringWithAggregatesFilter<"RideLog"> | string
    destinationAdress?: StringWithAggregatesFilter<"RideLog"> | string
    distance?: FloatWithAggregatesFilter<"RideLog"> | number
    duration?: StringWithAggregatesFilter<"RideLog"> | string
    driverId?: IntWithAggregatesFilter<"RideLog"> | number
    value?: FloatWithAggregatesFilter<"RideLog"> | number
    createdAt?: DateTimeWithAggregatesFilter<"RideLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RideLog"> | Date | string
  }

  export type CustomerCreateInput = {
    name: string
    RideLog?: RideLogCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    name: string
    RideLog?: RideLogUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    RideLog?: RideLogUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    RideLog?: RideLogUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    name: string
  }

  export type CustomerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DriverCreateInput = {
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
    RideLog?: RideLogCreateNestedManyWithoutDriverInput
    RideRequest?: RideRequestCreateNestedManyWithoutOptionsInput
  }

  export type DriverUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
    RideLog?: RideLogUncheckedCreateNestedManyWithoutDriverInput
    RideRequest?: RideRequestUncheckedCreateNestedManyWithoutOptionsInput
  }

  export type DriverUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
    RideLog?: RideLogUpdateManyWithoutDriverNestedInput
    RideRequest?: RideRequestUpdateManyWithoutOptionsNestedInput
  }

  export type DriverUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
    RideLog?: RideLogUncheckedUpdateManyWithoutDriverNestedInput
    RideRequest?: RideRequestUncheckedUpdateManyWithoutOptionsNestedInput
  }

  export type DriverCreateManyInput = {
    id?: number
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
  }

  export type DriverUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
  }

  export type DriverUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
  }

  export type RideRequestCreateInput = {
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: DriverCreateNestedManyWithoutRideRequestInput
  }

  export type RideRequestUncheckedCreateInput = {
    id?: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: DriverUncheckedCreateNestedManyWithoutRideRequestInput
  }

  export type RideRequestUpdateInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: DriverUpdateManyWithoutRideRequestNestedInput
  }

  export type RideRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: DriverUncheckedUpdateManyWithoutRideRequestNestedInput
  }

  export type RideRequestCreateManyInput = {
    id?: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideRequestUpdateManyMutationInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideLogCreateInput = {
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutRideLogInput
    driver: DriverCreateNestedOneWithoutRideLogInput
  }

  export type RideLogUncheckedCreateInput = {
    id?: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    driverId: number
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideLogUpdateInput = {
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutRideLogNestedInput
    driver?: DriverUpdateOneRequiredWithoutRideLogNestedInput
  }

  export type RideLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    driverId?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideLogCreateManyInput = {
    id?: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    driverId: number
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideLogUpdateManyMutationInput = {
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    driverId?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RideLogListRelationFilter = {
    every?: RideLogWhereInput
    some?: RideLogWhereInput
    none?: RideLogWhereInput
  }

  export type RideLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type RideRequestListRelationFilter = {
    every?: RideRequestWhereInput
    some?: RideRequestWhereInput
    none?: RideRequestWhereInput
  }

  export type RideRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DriverCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    vehicle?: SortOrder
    review_rating?: SortOrder
    review_comment?: SortOrder
    value?: SortOrder
    km_min?: SortOrder
  }

  export type DriverAvgOrderByAggregateInput = {
    id?: SortOrder
    review_rating?: SortOrder
    value?: SortOrder
    km_min?: SortOrder
  }

  export type DriverMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    vehicle?: SortOrder
    review_rating?: SortOrder
    review_comment?: SortOrder
    value?: SortOrder
    km_min?: SortOrder
  }

  export type DriverMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    vehicle?: SortOrder
    review_rating?: SortOrder
    review_comment?: SortOrder
    value?: SortOrder
    km_min?: SortOrder
  }

  export type DriverSumOrderByAggregateInput = {
    id?: SortOrder
    review_rating?: SortOrder
    value?: SortOrder
    km_min?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DriverListRelationFilter = {
    every?: DriverWhereInput
    some?: DriverWhereInput
    none?: DriverWhereInput
  }

  export type DriverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RideRequestCountOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RideRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    distance?: SortOrder
  }

  export type RideRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RideRequestMinOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RideRequestSumOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    distance?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CustomerRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type DriverRelationFilter = {
    is?: DriverWhereInput
    isNot?: DriverWhereInput
  }

  export type RideLogCountOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    driverId?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RideLogAvgOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    distance?: SortOrder
    driverId?: SortOrder
    value?: SortOrder
  }

  export type RideLogMaxOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    driverId?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RideLogMinOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    originLat?: SortOrder
    originLng?: SortOrder
    originAdress?: SortOrder
    destinationLat?: SortOrder
    destinationLng?: SortOrder
    destinationAdress?: SortOrder
    distance?: SortOrder
    duration?: SortOrder
    driverId?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RideLogSumOrderByAggregateInput = {
    id?: SortOrder
    customer_id?: SortOrder
    distance?: SortOrder
    driverId?: SortOrder
    value?: SortOrder
  }

  export type RideLogCreateNestedManyWithoutCustomerInput = {
    create?: XOR<RideLogCreateWithoutCustomerInput, RideLogUncheckedCreateWithoutCustomerInput> | RideLogCreateWithoutCustomerInput[] | RideLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutCustomerInput | RideLogCreateOrConnectWithoutCustomerInput[]
    createMany?: RideLogCreateManyCustomerInputEnvelope
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
  }

  export type RideLogUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<RideLogCreateWithoutCustomerInput, RideLogUncheckedCreateWithoutCustomerInput> | RideLogCreateWithoutCustomerInput[] | RideLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutCustomerInput | RideLogCreateOrConnectWithoutCustomerInput[]
    createMany?: RideLogCreateManyCustomerInputEnvelope
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RideLogUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<RideLogCreateWithoutCustomerInput, RideLogUncheckedCreateWithoutCustomerInput> | RideLogCreateWithoutCustomerInput[] | RideLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutCustomerInput | RideLogCreateOrConnectWithoutCustomerInput[]
    upsert?: RideLogUpsertWithWhereUniqueWithoutCustomerInput | RideLogUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: RideLogCreateManyCustomerInputEnvelope
    set?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    disconnect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    delete?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    update?: RideLogUpdateWithWhereUniqueWithoutCustomerInput | RideLogUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: RideLogUpdateManyWithWhereWithoutCustomerInput | RideLogUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: RideLogScalarWhereInput | RideLogScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RideLogUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<RideLogCreateWithoutCustomerInput, RideLogUncheckedCreateWithoutCustomerInput> | RideLogCreateWithoutCustomerInput[] | RideLogUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutCustomerInput | RideLogCreateOrConnectWithoutCustomerInput[]
    upsert?: RideLogUpsertWithWhereUniqueWithoutCustomerInput | RideLogUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: RideLogCreateManyCustomerInputEnvelope
    set?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    disconnect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    delete?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    update?: RideLogUpdateWithWhereUniqueWithoutCustomerInput | RideLogUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: RideLogUpdateManyWithWhereWithoutCustomerInput | RideLogUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: RideLogScalarWhereInput | RideLogScalarWhereInput[]
  }

  export type RideLogCreateNestedManyWithoutDriverInput = {
    create?: XOR<RideLogCreateWithoutDriverInput, RideLogUncheckedCreateWithoutDriverInput> | RideLogCreateWithoutDriverInput[] | RideLogUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutDriverInput | RideLogCreateOrConnectWithoutDriverInput[]
    createMany?: RideLogCreateManyDriverInputEnvelope
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
  }

  export type RideRequestCreateNestedManyWithoutOptionsInput = {
    create?: XOR<RideRequestCreateWithoutOptionsInput, RideRequestUncheckedCreateWithoutOptionsInput> | RideRequestCreateWithoutOptionsInput[] | RideRequestUncheckedCreateWithoutOptionsInput[]
    connectOrCreate?: RideRequestCreateOrConnectWithoutOptionsInput | RideRequestCreateOrConnectWithoutOptionsInput[]
    connect?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
  }

  export type RideLogUncheckedCreateNestedManyWithoutDriverInput = {
    create?: XOR<RideLogCreateWithoutDriverInput, RideLogUncheckedCreateWithoutDriverInput> | RideLogCreateWithoutDriverInput[] | RideLogUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutDriverInput | RideLogCreateOrConnectWithoutDriverInput[]
    createMany?: RideLogCreateManyDriverInputEnvelope
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
  }

  export type RideRequestUncheckedCreateNestedManyWithoutOptionsInput = {
    create?: XOR<RideRequestCreateWithoutOptionsInput, RideRequestUncheckedCreateWithoutOptionsInput> | RideRequestCreateWithoutOptionsInput[] | RideRequestUncheckedCreateWithoutOptionsInput[]
    connectOrCreate?: RideRequestCreateOrConnectWithoutOptionsInput | RideRequestCreateOrConnectWithoutOptionsInput[]
    connect?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RideLogUpdateManyWithoutDriverNestedInput = {
    create?: XOR<RideLogCreateWithoutDriverInput, RideLogUncheckedCreateWithoutDriverInput> | RideLogCreateWithoutDriverInput[] | RideLogUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutDriverInput | RideLogCreateOrConnectWithoutDriverInput[]
    upsert?: RideLogUpsertWithWhereUniqueWithoutDriverInput | RideLogUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: RideLogCreateManyDriverInputEnvelope
    set?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    disconnect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    delete?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    update?: RideLogUpdateWithWhereUniqueWithoutDriverInput | RideLogUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: RideLogUpdateManyWithWhereWithoutDriverInput | RideLogUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: RideLogScalarWhereInput | RideLogScalarWhereInput[]
  }

  export type RideRequestUpdateManyWithoutOptionsNestedInput = {
    create?: XOR<RideRequestCreateWithoutOptionsInput, RideRequestUncheckedCreateWithoutOptionsInput> | RideRequestCreateWithoutOptionsInput[] | RideRequestUncheckedCreateWithoutOptionsInput[]
    connectOrCreate?: RideRequestCreateOrConnectWithoutOptionsInput | RideRequestCreateOrConnectWithoutOptionsInput[]
    upsert?: RideRequestUpsertWithWhereUniqueWithoutOptionsInput | RideRequestUpsertWithWhereUniqueWithoutOptionsInput[]
    set?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    disconnect?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    delete?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    connect?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    update?: RideRequestUpdateWithWhereUniqueWithoutOptionsInput | RideRequestUpdateWithWhereUniqueWithoutOptionsInput[]
    updateMany?: RideRequestUpdateManyWithWhereWithoutOptionsInput | RideRequestUpdateManyWithWhereWithoutOptionsInput[]
    deleteMany?: RideRequestScalarWhereInput | RideRequestScalarWhereInput[]
  }

  export type RideLogUncheckedUpdateManyWithoutDriverNestedInput = {
    create?: XOR<RideLogCreateWithoutDriverInput, RideLogUncheckedCreateWithoutDriverInput> | RideLogCreateWithoutDriverInput[] | RideLogUncheckedCreateWithoutDriverInput[]
    connectOrCreate?: RideLogCreateOrConnectWithoutDriverInput | RideLogCreateOrConnectWithoutDriverInput[]
    upsert?: RideLogUpsertWithWhereUniqueWithoutDriverInput | RideLogUpsertWithWhereUniqueWithoutDriverInput[]
    createMany?: RideLogCreateManyDriverInputEnvelope
    set?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    disconnect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    delete?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    connect?: RideLogWhereUniqueInput | RideLogWhereUniqueInput[]
    update?: RideLogUpdateWithWhereUniqueWithoutDriverInput | RideLogUpdateWithWhereUniqueWithoutDriverInput[]
    updateMany?: RideLogUpdateManyWithWhereWithoutDriverInput | RideLogUpdateManyWithWhereWithoutDriverInput[]
    deleteMany?: RideLogScalarWhereInput | RideLogScalarWhereInput[]
  }

  export type RideRequestUncheckedUpdateManyWithoutOptionsNestedInput = {
    create?: XOR<RideRequestCreateWithoutOptionsInput, RideRequestUncheckedCreateWithoutOptionsInput> | RideRequestCreateWithoutOptionsInput[] | RideRequestUncheckedCreateWithoutOptionsInput[]
    connectOrCreate?: RideRequestCreateOrConnectWithoutOptionsInput | RideRequestCreateOrConnectWithoutOptionsInput[]
    upsert?: RideRequestUpsertWithWhereUniqueWithoutOptionsInput | RideRequestUpsertWithWhereUniqueWithoutOptionsInput[]
    set?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    disconnect?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    delete?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    connect?: RideRequestWhereUniqueInput | RideRequestWhereUniqueInput[]
    update?: RideRequestUpdateWithWhereUniqueWithoutOptionsInput | RideRequestUpdateWithWhereUniqueWithoutOptionsInput[]
    updateMany?: RideRequestUpdateManyWithWhereWithoutOptionsInput | RideRequestUpdateManyWithWhereWithoutOptionsInput[]
    deleteMany?: RideRequestScalarWhereInput | RideRequestScalarWhereInput[]
  }

  export type DriverCreateNestedManyWithoutRideRequestInput = {
    create?: XOR<DriverCreateWithoutRideRequestInput, DriverUncheckedCreateWithoutRideRequestInput> | DriverCreateWithoutRideRequestInput[] | DriverUncheckedCreateWithoutRideRequestInput[]
    connectOrCreate?: DriverCreateOrConnectWithoutRideRequestInput | DriverCreateOrConnectWithoutRideRequestInput[]
    connect?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
  }

  export type DriverUncheckedCreateNestedManyWithoutRideRequestInput = {
    create?: XOR<DriverCreateWithoutRideRequestInput, DriverUncheckedCreateWithoutRideRequestInput> | DriverCreateWithoutRideRequestInput[] | DriverUncheckedCreateWithoutRideRequestInput[]
    connectOrCreate?: DriverCreateOrConnectWithoutRideRequestInput | DriverCreateOrConnectWithoutRideRequestInput[]
    connect?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DriverUpdateManyWithoutRideRequestNestedInput = {
    create?: XOR<DriverCreateWithoutRideRequestInput, DriverUncheckedCreateWithoutRideRequestInput> | DriverCreateWithoutRideRequestInput[] | DriverUncheckedCreateWithoutRideRequestInput[]
    connectOrCreate?: DriverCreateOrConnectWithoutRideRequestInput | DriverCreateOrConnectWithoutRideRequestInput[]
    upsert?: DriverUpsertWithWhereUniqueWithoutRideRequestInput | DriverUpsertWithWhereUniqueWithoutRideRequestInput[]
    set?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    disconnect?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    delete?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    connect?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    update?: DriverUpdateWithWhereUniqueWithoutRideRequestInput | DriverUpdateWithWhereUniqueWithoutRideRequestInput[]
    updateMany?: DriverUpdateManyWithWhereWithoutRideRequestInput | DriverUpdateManyWithWhereWithoutRideRequestInput[]
    deleteMany?: DriverScalarWhereInput | DriverScalarWhereInput[]
  }

  export type DriverUncheckedUpdateManyWithoutRideRequestNestedInput = {
    create?: XOR<DriverCreateWithoutRideRequestInput, DriverUncheckedCreateWithoutRideRequestInput> | DriverCreateWithoutRideRequestInput[] | DriverUncheckedCreateWithoutRideRequestInput[]
    connectOrCreate?: DriverCreateOrConnectWithoutRideRequestInput | DriverCreateOrConnectWithoutRideRequestInput[]
    upsert?: DriverUpsertWithWhereUniqueWithoutRideRequestInput | DriverUpsertWithWhereUniqueWithoutRideRequestInput[]
    set?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    disconnect?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    delete?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    connect?: DriverWhereUniqueInput | DriverWhereUniqueInput[]
    update?: DriverUpdateWithWhereUniqueWithoutRideRequestInput | DriverUpdateWithWhereUniqueWithoutRideRequestInput[]
    updateMany?: DriverUpdateManyWithWhereWithoutRideRequestInput | DriverUpdateManyWithWhereWithoutRideRequestInput[]
    deleteMany?: DriverScalarWhereInput | DriverScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutRideLogInput = {
    create?: XOR<CustomerCreateWithoutRideLogInput, CustomerUncheckedCreateWithoutRideLogInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutRideLogInput
    connect?: CustomerWhereUniqueInput
  }

  export type DriverCreateNestedOneWithoutRideLogInput = {
    create?: XOR<DriverCreateWithoutRideLogInput, DriverUncheckedCreateWithoutRideLogInput>
    connectOrCreate?: DriverCreateOrConnectWithoutRideLogInput
    connect?: DriverWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutRideLogNestedInput = {
    create?: XOR<CustomerCreateWithoutRideLogInput, CustomerUncheckedCreateWithoutRideLogInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutRideLogInput
    upsert?: CustomerUpsertWithoutRideLogInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutRideLogInput, CustomerUpdateWithoutRideLogInput>, CustomerUncheckedUpdateWithoutRideLogInput>
  }

  export type DriverUpdateOneRequiredWithoutRideLogNestedInput = {
    create?: XOR<DriverCreateWithoutRideLogInput, DriverUncheckedCreateWithoutRideLogInput>
    connectOrCreate?: DriverCreateOrConnectWithoutRideLogInput
    upsert?: DriverUpsertWithoutRideLogInput
    connect?: DriverWhereUniqueInput
    update?: XOR<XOR<DriverUpdateToOneWithWhereWithoutRideLogInput, DriverUpdateWithoutRideLogInput>, DriverUncheckedUpdateWithoutRideLogInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RideLogCreateWithoutCustomerInput = {
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    driver: DriverCreateNestedOneWithoutRideLogInput
  }

  export type RideLogUncheckedCreateWithoutCustomerInput = {
    id?: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    driverId: number
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideLogCreateOrConnectWithoutCustomerInput = {
    where: RideLogWhereUniqueInput
    create: XOR<RideLogCreateWithoutCustomerInput, RideLogUncheckedCreateWithoutCustomerInput>
  }

  export type RideLogCreateManyCustomerInputEnvelope = {
    data: RideLogCreateManyCustomerInput | RideLogCreateManyCustomerInput[]
  }

  export type RideLogUpsertWithWhereUniqueWithoutCustomerInput = {
    where: RideLogWhereUniqueInput
    update: XOR<RideLogUpdateWithoutCustomerInput, RideLogUncheckedUpdateWithoutCustomerInput>
    create: XOR<RideLogCreateWithoutCustomerInput, RideLogUncheckedCreateWithoutCustomerInput>
  }

  export type RideLogUpdateWithWhereUniqueWithoutCustomerInput = {
    where: RideLogWhereUniqueInput
    data: XOR<RideLogUpdateWithoutCustomerInput, RideLogUncheckedUpdateWithoutCustomerInput>
  }

  export type RideLogUpdateManyWithWhereWithoutCustomerInput = {
    where: RideLogScalarWhereInput
    data: XOR<RideLogUpdateManyMutationInput, RideLogUncheckedUpdateManyWithoutCustomerInput>
  }

  export type RideLogScalarWhereInput = {
    AND?: RideLogScalarWhereInput | RideLogScalarWhereInput[]
    OR?: RideLogScalarWhereInput[]
    NOT?: RideLogScalarWhereInput | RideLogScalarWhereInput[]
    id?: IntFilter<"RideLog"> | number
    customer_id?: IntFilter<"RideLog"> | number
    originLat?: StringFilter<"RideLog"> | string
    originLng?: StringFilter<"RideLog"> | string
    originAdress?: StringFilter<"RideLog"> | string
    destinationLat?: StringFilter<"RideLog"> | string
    destinationLng?: StringFilter<"RideLog"> | string
    destinationAdress?: StringFilter<"RideLog"> | string
    distance?: FloatFilter<"RideLog"> | number
    duration?: StringFilter<"RideLog"> | string
    driverId?: IntFilter<"RideLog"> | number
    value?: FloatFilter<"RideLog"> | number
    createdAt?: DateTimeFilter<"RideLog"> | Date | string
    updatedAt?: DateTimeFilter<"RideLog"> | Date | string
  }

  export type RideLogCreateWithoutDriverInput = {
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutRideLogInput
  }

  export type RideLogUncheckedCreateWithoutDriverInput = {
    id?: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideLogCreateOrConnectWithoutDriverInput = {
    where: RideLogWhereUniqueInput
    create: XOR<RideLogCreateWithoutDriverInput, RideLogUncheckedCreateWithoutDriverInput>
  }

  export type RideLogCreateManyDriverInputEnvelope = {
    data: RideLogCreateManyDriverInput | RideLogCreateManyDriverInput[]
  }

  export type RideRequestCreateWithoutOptionsInput = {
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideRequestUncheckedCreateWithoutOptionsInput = {
    id?: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideRequestCreateOrConnectWithoutOptionsInput = {
    where: RideRequestWhereUniqueInput
    create: XOR<RideRequestCreateWithoutOptionsInput, RideRequestUncheckedCreateWithoutOptionsInput>
  }

  export type RideLogUpsertWithWhereUniqueWithoutDriverInput = {
    where: RideLogWhereUniqueInput
    update: XOR<RideLogUpdateWithoutDriverInput, RideLogUncheckedUpdateWithoutDriverInput>
    create: XOR<RideLogCreateWithoutDriverInput, RideLogUncheckedCreateWithoutDriverInput>
  }

  export type RideLogUpdateWithWhereUniqueWithoutDriverInput = {
    where: RideLogWhereUniqueInput
    data: XOR<RideLogUpdateWithoutDriverInput, RideLogUncheckedUpdateWithoutDriverInput>
  }

  export type RideLogUpdateManyWithWhereWithoutDriverInput = {
    where: RideLogScalarWhereInput
    data: XOR<RideLogUpdateManyMutationInput, RideLogUncheckedUpdateManyWithoutDriverInput>
  }

  export type RideRequestUpsertWithWhereUniqueWithoutOptionsInput = {
    where: RideRequestWhereUniqueInput
    update: XOR<RideRequestUpdateWithoutOptionsInput, RideRequestUncheckedUpdateWithoutOptionsInput>
    create: XOR<RideRequestCreateWithoutOptionsInput, RideRequestUncheckedCreateWithoutOptionsInput>
  }

  export type RideRequestUpdateWithWhereUniqueWithoutOptionsInput = {
    where: RideRequestWhereUniqueInput
    data: XOR<RideRequestUpdateWithoutOptionsInput, RideRequestUncheckedUpdateWithoutOptionsInput>
  }

  export type RideRequestUpdateManyWithWhereWithoutOptionsInput = {
    where: RideRequestScalarWhereInput
    data: XOR<RideRequestUpdateManyMutationInput, RideRequestUncheckedUpdateManyWithoutOptionsInput>
  }

  export type RideRequestScalarWhereInput = {
    AND?: RideRequestScalarWhereInput | RideRequestScalarWhereInput[]
    OR?: RideRequestScalarWhereInput[]
    NOT?: RideRequestScalarWhereInput | RideRequestScalarWhereInput[]
    id?: IntFilter<"RideRequest"> | number
    customer_id?: IntFilter<"RideRequest"> | number
    originLat?: StringFilter<"RideRequest"> | string
    originLng?: StringFilter<"RideRequest"> | string
    originAdress?: StringFilter<"RideRequest"> | string
    destinationLat?: StringFilter<"RideRequest"> | string
    destinationLng?: StringFilter<"RideRequest"> | string
    destinationAdress?: StringFilter<"RideRequest"> | string
    distance?: FloatFilter<"RideRequest"> | number
    duration?: StringFilter<"RideRequest"> | string
    createdAt?: DateTimeFilter<"RideRequest"> | Date | string
    updatedAt?: DateTimeFilter<"RideRequest"> | Date | string
  }

  export type DriverCreateWithoutRideRequestInput = {
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
    RideLog?: RideLogCreateNestedManyWithoutDriverInput
  }

  export type DriverUncheckedCreateWithoutRideRequestInput = {
    id?: number
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
    RideLog?: RideLogUncheckedCreateNestedManyWithoutDriverInput
  }

  export type DriverCreateOrConnectWithoutRideRequestInput = {
    where: DriverWhereUniqueInput
    create: XOR<DriverCreateWithoutRideRequestInput, DriverUncheckedCreateWithoutRideRequestInput>
  }

  export type DriverUpsertWithWhereUniqueWithoutRideRequestInput = {
    where: DriverWhereUniqueInput
    update: XOR<DriverUpdateWithoutRideRequestInput, DriverUncheckedUpdateWithoutRideRequestInput>
    create: XOR<DriverCreateWithoutRideRequestInput, DriverUncheckedCreateWithoutRideRequestInput>
  }

  export type DriverUpdateWithWhereUniqueWithoutRideRequestInput = {
    where: DriverWhereUniqueInput
    data: XOR<DriverUpdateWithoutRideRequestInput, DriverUncheckedUpdateWithoutRideRequestInput>
  }

  export type DriverUpdateManyWithWhereWithoutRideRequestInput = {
    where: DriverScalarWhereInput
    data: XOR<DriverUpdateManyMutationInput, DriverUncheckedUpdateManyWithoutRideRequestInput>
  }

  export type DriverScalarWhereInput = {
    AND?: DriverScalarWhereInput | DriverScalarWhereInput[]
    OR?: DriverScalarWhereInput[]
    NOT?: DriverScalarWhereInput | DriverScalarWhereInput[]
    id?: IntFilter<"Driver"> | number
    name?: StringFilter<"Driver"> | string
    description?: StringFilter<"Driver"> | string
    vehicle?: StringFilter<"Driver"> | string
    review_rating?: IntFilter<"Driver"> | number
    review_comment?: StringFilter<"Driver"> | string
    value?: FloatFilter<"Driver"> | number
    km_min?: IntFilter<"Driver"> | number
  }

  export type CustomerCreateWithoutRideLogInput = {
    name: string
  }

  export type CustomerUncheckedCreateWithoutRideLogInput = {
    id?: number
    name: string
  }

  export type CustomerCreateOrConnectWithoutRideLogInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutRideLogInput, CustomerUncheckedCreateWithoutRideLogInput>
  }

  export type DriverCreateWithoutRideLogInput = {
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
    RideRequest?: RideRequestCreateNestedManyWithoutOptionsInput
  }

  export type DriverUncheckedCreateWithoutRideLogInput = {
    id?: number
    name: string
    description: string
    vehicle: string
    review_rating: number
    review_comment: string
    value: number
    km_min: number
    RideRequest?: RideRequestUncheckedCreateNestedManyWithoutOptionsInput
  }

  export type DriverCreateOrConnectWithoutRideLogInput = {
    where: DriverWhereUniqueInput
    create: XOR<DriverCreateWithoutRideLogInput, DriverUncheckedCreateWithoutRideLogInput>
  }

  export type CustomerUpsertWithoutRideLogInput = {
    update: XOR<CustomerUpdateWithoutRideLogInput, CustomerUncheckedUpdateWithoutRideLogInput>
    create: XOR<CustomerCreateWithoutRideLogInput, CustomerUncheckedCreateWithoutRideLogInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutRideLogInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutRideLogInput, CustomerUncheckedUpdateWithoutRideLogInput>
  }

  export type CustomerUpdateWithoutRideLogInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerUncheckedUpdateWithoutRideLogInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type DriverUpsertWithoutRideLogInput = {
    update: XOR<DriverUpdateWithoutRideLogInput, DriverUncheckedUpdateWithoutRideLogInput>
    create: XOR<DriverCreateWithoutRideLogInput, DriverUncheckedCreateWithoutRideLogInput>
    where?: DriverWhereInput
  }

  export type DriverUpdateToOneWithWhereWithoutRideLogInput = {
    where?: DriverWhereInput
    data: XOR<DriverUpdateWithoutRideLogInput, DriverUncheckedUpdateWithoutRideLogInput>
  }

  export type DriverUpdateWithoutRideLogInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
    RideRequest?: RideRequestUpdateManyWithoutOptionsNestedInput
  }

  export type DriverUncheckedUpdateWithoutRideLogInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
    RideRequest?: RideRequestUncheckedUpdateManyWithoutOptionsNestedInput
  }

  export type RideLogCreateManyCustomerInput = {
    id?: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    driverId: number
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideLogUpdateWithoutCustomerInput = {
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    driver?: DriverUpdateOneRequiredWithoutRideLogNestedInput
  }

  export type RideLogUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    driverId?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideLogUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    driverId?: IntFieldUpdateOperationsInput | number
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideLogCreateManyDriverInput = {
    id?: number
    customer_id: number
    originLat: string
    originLng: string
    originAdress: string
    destinationLat: string
    destinationLng: string
    destinationAdress: string
    distance: number
    duration: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RideLogUpdateWithoutDriverInput = {
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutRideLogNestedInput
  }

  export type RideLogUncheckedUpdateWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideLogUncheckedUpdateManyWithoutDriverInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideRequestUpdateWithoutOptionsInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideRequestUncheckedUpdateWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RideRequestUncheckedUpdateManyWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    originLat?: StringFieldUpdateOperationsInput | string
    originLng?: StringFieldUpdateOperationsInput | string
    originAdress?: StringFieldUpdateOperationsInput | string
    destinationLat?: StringFieldUpdateOperationsInput | string
    destinationLng?: StringFieldUpdateOperationsInput | string
    destinationAdress?: StringFieldUpdateOperationsInput | string
    distance?: FloatFieldUpdateOperationsInput | number
    duration?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DriverUpdateWithoutRideRequestInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
    RideLog?: RideLogUpdateManyWithoutDriverNestedInput
  }

  export type DriverUncheckedUpdateWithoutRideRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
    RideLog?: RideLogUncheckedUpdateManyWithoutDriverNestedInput
  }

  export type DriverUncheckedUpdateManyWithoutRideRequestInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    vehicle?: StringFieldUpdateOperationsInput | string
    review_rating?: IntFieldUpdateOperationsInput | number
    review_comment?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    km_min?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CustomerCountOutputTypeDefaultArgs instead
     */
    export type CustomerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DriverCountOutputTypeDefaultArgs instead
     */
    export type DriverCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DriverCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RideRequestCountOutputTypeDefaultArgs instead
     */
    export type RideRequestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RideRequestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomerDefaultArgs instead
     */
    export type CustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DriverDefaultArgs instead
     */
    export type DriverArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DriverDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RideRequestDefaultArgs instead
     */
    export type RideRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RideRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RideLogDefaultArgs instead
     */
    export type RideLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RideLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}